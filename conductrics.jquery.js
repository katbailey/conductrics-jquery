// Generated by CoffeeScript 1.6.3
(function() {
  var $,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  window.conductrics = function(options) {
    var complain, constructUrl, doAjax, ensure, getWorkaroundId, sanitizeCodes, sanitizeCodesStr, settings, storageKey, storageMaintain, storageRead, storageWrite, supportsHtmlLocalStorage, validCode;
    settings = $.extend(true, {
      'baseUrl': 'http://api.conductrics.com',
      'apiKey': null,
      'agent': null,
      'session': null,
      'timeout': 1000,
      'caching': false,
      'cachingMaxAge': 30 * 60,
      'sessionCookies': false,
      'sessionCookieName': 'mpid',
      'sessionCookieOptions': {
        path: '/'
      }
    }, options);
    doAjax = function(url, type, data, callback) {
      var storedId;
      if (data.session === null && settings.sessionCookies) {
        storedId = $.cookie(settings.sessionCookieName);
        if (storedId) {
          data.session = storedId;
        }
      }
      if (data.session === null && window.XDomainRequest) {
        data.session = getWorkaroundId();
      }
      if (data.session === null) {
        delete data.session;
      }
      return $.ajax({
        url: url,
        type: type,
        dataType: 'json',
        data: data,
        timeout: settings.timeout,
        success: function(data, textStatus, jqXHR) {
          if (settings.sessionCookies && data !== null && data.session !== null) {
            $.cookie(settings.sessionCookieName, data.session, settings.sessionCookieOptions);
          }
          if (typeof callback === 'function') {
            return callback(data, textStatus, jqXHR);
          }
        },
        error: function(jqXHR, textStatus, errorThrown) {
          if (typeof callback === 'function') {
            return callback(null, textStatus, jqXHR);
          }
        },
        xhrFields: {
          withCredentials: true
        }
      });
    };
    constructUrl = function(parts, options) {
      return [settings.baseUrl, settings.owner, options.agent].concat(parts).join('/');
    };
    getWorkaroundId = function() {
      var alphabet, randomElement, randomString, workaroundID;
      alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890".split("");
      randomElement = function(arr) {
        return arr[Math.floor(Math.random() * arr.length)];
      };
      randomString = function(len, prefix) {
        if (prefix === null) {
          prefix = "";
        }
        while (prefix.length < len) {
          prefix += randomElement(alphabet);
        }
        return prefix;
      };
      workaroundID = $.cookie('conductrics-id');
      if (workaroundID === void 0) {
        workaroundID = randomString(32, 'cond-');
        $.cookie('conductrics-id', workaroundID);
      }
      return workaroundID;
    };
    complain = function() {
      if (console && console.log) {
        return console.log(arguments);
      }
    };
    ensure = function(options, keys) {
      var key, _i, _len;
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        if (options[key] === void 0) {
          complain("Conductrics plugin cannot proceed because option '" + key + "' is not provided.");
          return false;
        }
      }
      return true;
    };
    validCode = function(s) {
      return s !== null && s.length > 0 && s.length < 25 && !/[^0-9A-Za-z_-]/.test(s);
    };
    sanitizeCodesStr = function(str) {
      if (!str) {
        return "";
      }
      return sanitizeCodes(str.split(',')).join(',');
    };
    sanitizeCodes = function(codes) {
      var result, value, _i, _len;
      if (!codes) {
        return [];
      }
      result = [];
      for (_i = 0, _len = codes.length; _i < _len; _i++) {
        value = codes[_i];
        if (validCode(value)) {
          result.push(codes[i]);
        }
      }
      return result;
    };
    supportsHtmlLocalStorage = function() {
      var e;
      if (settings.caching !== 'localStorage') {
        return false;
      }
      try {
        return __indexOf.call(window, 'localStorage') >= 0 && window['localStorage'] !== null;
      } catch (_error) {
        e = _error;
        return false;
      }
    };
    storageKey = function(options, name) {
      var ar, ks, value, _i, _len;
      ar = [];
      ks = ['baseUrl', 'owner', 'agent', 'session'];
      for (_i = 0, _len = ks.length; _i < _len; _i++) {
        value = ks[_i];
        if (options[value] !== null) {
          ar.push(options[value]);
        } else if (settings[value] !== null) {
          ar.push(settings[value]);
        }
      }
      if (name) {
        ar.push(name);
      }
      return ar.join(':');
    };
    storageRead = function(options, name, defaultValue) {
      var key, record, store, stored;
      if (!supportsHtmlLocalStorage()) {
        return defaultValue;
      }
      store = localStorage;
      key = storageKey(options, name);
      stored = store.getItem(key);
      if (stored) {
        record = JSON.parse(stored);
        if (record.val) {
          return record.val;
        }
      }
      return defaultValue;
    };
    storageWrite = function(options, name, value) {
      var key, record, store;
      if (!supportsHtmlLocalStorage()) {
        return;
      }
      store = localStorage;
      key = storageKey(options, name);
      record = {
        ts: new Date().getTime(),
        val: value
      };
      return store.setItem(key, JSON.stringify(record));
    };
    storageMaintain = function() {
      var key, record, store, value;
      if (!supportsHtmlLocalStorage()) {
        return;
      }
      store = localStorage;
      for (key in store) {
        value = store[key];
        if (key.indexOf([settings.baseUrl, settings.owner].join(':') === 0)) {
          if (value) {
            record = JSON.parse(value);
            if (record.ts && (record.ts + (settings.cachingMaxAge * 1000)) < new Date().getTime()) {
              store.removeItem(key);
            }
          }
        }
      }
    };
    storageMaintain();
    return {
      getDecision: function(options, callback) {
        var data, decisions, selection, url;
        options = $.extend({
          agent: settings.agent,
          session: settings.session,
          decision: 'decision-1',
          choices: ['a', 'b']
        }, options);
        if (!ensure(options, ['agent'])) {
          return;
        }
        if (!ensure(settings, ['baseUrl', 'owner', 'apiKey'])) {
          return;
        }
        url = constructUrl(['decisions', options.choices.toString()], options);
        data = {
          apikey: settings.apiKey
        };
        if (options.session !== null) {
          data.session = options.session;
        }
        if (options.features) {
          data.features = sanitizeCodesStr(options.features);
        }
        if (typeof options.choices === 'number') {
          selection = {
            code: 0
          };
        } else if (typeof options.choices.join === 'function') {
          selection = {
            code: options.choices[0]
          };
        }
        if (settings.caching) {
          decisions = storageRead(options, 'dec');
          if (decisions && decisions[options.decision]) {
            selection = decisions[options.decision];
            if (typeof callback === 'function') {
              callback.apply(this, [selection, null, 'stored', null]);
              return;
            }
          }
        }
        doAjax(url, 'GET', data, function(response, textStatus, jqXHR) {
          if (textStatus === 'success') {
            selection = response.decisions[options.decision];
            if (settings.caching && selection) {
              storageWrite(options, 'dec', response.decisions);
            }
          }
          if (typeof callback === 'function') {
            return callback.apply(this, [selection, response, textStatus, jqXHR]);
          }
        });
        return this;
      },
      sendGoal: function(options, callback) {
        var data, url;
        options = $.extend({
          agent: settings.agent,
          session: settings.session,
          reward: null,
          goal: 'goal-1'
        }, options);
        url = constructUrl(['goal', options.goal], options);
        data = {
          apikey: settings.apiKey
        };
        if (options.reward) {
          data.reward = options.reward;
        }
        if (options.session) {
          data.session = options.session;
        }
        return doAjax(url, 'POST', data, function(response, textStatus, jqXHR) {
          if (typeof callback === 'function') {
            return callback.apply(this, [response, textStatus, jqXHR]);
          }
        });
      },
      expireSession: function(options, callback) {
        var data, url;
        options = $.extend({
          agent: settings.agent,
          session: settings.session
        }, options);
        url = constructUrl(['expire'], options);
        data = {
          apikey: settings.apiKey
        };
        if (options.session) {
          data.session = options.session;
        }
        doAjax(url, 'GET', data, function(response, textStatus, jqXHR) {
          if (typeof callback === 'function') {
            return callback.apply(this, [response, textStatus, jqXHR]);
          }
        });
        return this;
      }
    };
  };

  $.fn.extend({
    conductrics: function(method) {
      var methods, processSelection;
      processSelection = function(selected, selector) {
        switch (selected) {
          case 'show':
            return selector.show();
          case 'hide':
            return selector.hide();
          default:
            throw new Error('invalid operation');
        }
      };
      methods = {
        toggle: function(optionz, callback) {
          var $this, options;
          if (!optionz.conductrics_api) {
            throw new Error('no conductrics instance');
          }
          $this = $(this);
          options = $.extend({
            choices: ['show', 'hide'],
            initial: 'hide'
          }, optionz);
          processSelection(options.initial, $this);
          options.conductrics_api.getDecision(options, function(selection) {
            return processSelection(selection.code, $this);
          });
          return this;
        },
        'redirect-to-best-url': function(urls, optionz, callback) {
          var options, selectedUrl;
          if (!optionz.conductrics_api) {
            throw new Error('no conductrics instance');
          }
          options = $.extend({}, optionz);
          options.choices = urls.length;
          selectedUrl = urls[0];
          options.conductrics_api.getDecision(options, function(selection) {
            if (selection.code !== null) {
              return selectedUrl = urls[selection.code];
            }
          });
          window.location.replace(selectedUrl);
          return this;
        }
      };
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      }
    }
  });

}).call(this);
